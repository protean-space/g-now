{"version":3,"file":"Tag.js","sourceRoot":"","sources":["../../../src/components/Tag.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAC,cAAc,EAAC,MAAM,oBAAoB,CAAC;AAClD,OAAO,EAAC,eAAe,EAAC,MAAM,mBAAmB,CAAC;AAclD;IAAyB,uBAAsB;IAA/C;QAAA,qEAkCC;QAhCC,sBAAgB,GAAoC,KAAK,CAAC,SAAS,EAAE,CAAC;QAEtE,YAAM,GAAG,cAAM,OAAA,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAnC,CAAmC,CAAC;;IA8BrD,CAAC;IA5BC,oBAAM,GAAN;QAEQ,IAAA,eAAiG,EAA/F,gBAAK,EAAE,gBAAK,EAAE,sBAAQ,EAAE,sBAAQ,EAAE,wBAAS,EAAE,kBAAM,EAAE,sBAAQ,EAAE,wCAAgC,CAAC;QAExG,IAAM,cAAc,GAAG,CAAC,QAAQ,CAAC,CAAC;YAChC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAI,cAAc,CAAC,SAAS,SAAI,cAAc,CAAC,iBAAmB,CAAC;QAE/F,OAAO,CACL,6BAAK,SAAS,EAAE,cAAc,CAAC,GAAG;YAC/B,CAAC,QAAQ,IAAI,6BAAK,SAAS,EAAE,cAAc,CAAC,UAAU,IAAG,KAAK,CAAO;YACrE,QAAQ,IAAI,CACX,oBAAC,eAAe,IACd,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,QAAQ,EAClB,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,EACvC,SAAS,EAAE,cAAc,CAAC,UAAU,EACpC,MAAM,EAAE,UAAC,QAAQ,IAAK,OAAA,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAvB,CAAuB,EAC7C,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,SAAS,EAAE,SAAS,EACpB,iBAAiB,EAAE,iBAAiB,GACpC,CACH;YACD,6BAAK,SAAS,EAAE,cAAc,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM,GAAG,CACnD,CACP,CAAC;IAEJ,CAAC;IAEH,UAAC;AAAD,CAAC,AAlCD,CAAyB,KAAK,CAAC,SAAS,GAkCvC","sourcesContent":["import React from \"react\";\nimport {classSelectors} from \"../utils/selectors\";\nimport {ContentEditable} from \"./ContentEditable\";\n\ninterface Props {\n  value: string;\n  index: number;\n  editable: boolean;\n  readOnly: boolean;\n  inputRef: React.RefObject<HTMLInputElement>;\n  update: (i: number, value: string) => void;\n  remove: (i: number) => void;\n  validator?: (val: string) => boolean;\n  removeOnBackspace?: boolean;\n}\n\nexport class Tag extends React.Component<Props> {\n\n  innerEditableRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n  remove = () => this.props.remove(this.props.index);\n\n  render() {\n\n    const { value, index, editable, inputRef, validator, update, readOnly, removeOnBackspace } = this.props;\n\n    const tagRemoveClass = !readOnly ?\n      classSelectors.tagRemove : `${classSelectors.tagRemove} ${classSelectors.tagRemoveReadOnly}`;\n\n    return (\n      <div className={classSelectors.tag}>\n        {!editable && <div className={classSelectors.tagContent}>{value}</div>}\n        {editable && (\n          <ContentEditable\n            value={value}\n            inputRef={inputRef}\n            innerEditableRef={this.innerEditableRef}\n            className={classSelectors.tagContent}\n            change={(newValue) => update(index, newValue)}\n            remove={this.remove}\n            validator={validator}\n            removeOnBackspace={removeOnBackspace}\n          />\n        )}\n        <div className={tagRemoveClass} onClick={this.remove}/>\n      </div>\n    );\n\n  }\n\n}\n"]}